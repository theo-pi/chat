#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <pthread.h>
#include <signal.h>

#define SERVER_ADDRESS "127.0.0.1"  // Adresse IP du serveur (dans cet exemple, localhost)
#define SERVER_PORT 12345           // Port du serveur
#define BUFFER_SIZE 1024            // Taille du tampon de lecture/écriture
#define MAX_CLIENTS 3               // Nombre maximal de clients gérés par le serveur

int server_socket;                  // Socket du serveur
int client_sockets[MAX_CLIENTS];    // Tableau des sockets des clients connectés
pthread_mutex_t client_sockets_mutex;  // Mutex pour la synchronisation de l'accès au tableau des sockets clients

// Fonction pour envoyer un message à tous les clients sauf l'émetteur
void send_message_to_all_clients(const char *message, int sender_socket) {
    pthread_mutex_lock(&client_sockets_mutex);  // Verrouillage du mutex pour l'accès exclusif au tableau des sockets clients

    for (int i = 0; i < MAX_CLIENTS; i++) {
        int client_socket = client_sockets[i];

        if (client_socket != -1 && client_socket != sender_socket) {  // Vérifie que le socket client est valide et n'est pas l'émetteur
            if (send(client_socket, message, strlen(message), 0) == -1) {  // Envoie le message au socket client
                perror("send");
                exit(EXIT_FAILURE);
            }
        }
    }

    pthread_mutex_unlock(&client_sockets_mutex);  // Déverrouillage du mutex
}

// Fonction exécutée par chaque thread pour gérer un client
void *client_handler(void *arg) {
    int client_socket = *(int *)arg;  // Récupération du socket client depuis l'argument
    char username[BUFFER_SIZE];       // Tampon pour stocker le nom d'utilisateur du client

    // Envoyer le message "Entrer votre pseudo :" au client
    char prompt_message[] = "Entrer votre pseudo : ";
    if (send(client_socket, prompt_message, strlen(prompt_message), 0) == -1) {
        perror("send");
        exit(EXIT_FAILURE);
    }

    // Recevoir le nom d'utilisateur du client
    ssize_t bytes_received = recv(client_socket, username, BUFFER_SIZE - 1, 0);
    if (bytes_received > 0) {
        for (int i = 0; i < bytes_received; ++i) {
            if (username[i] == '\n' || username[i] == '\r') {  // Remplace les caractères de nouvelle ligne par une fin de chaîne
                username[i] = '\0';
                break;
            }
        }
        printf("\033[1;34m%s a rejoint le chat\033[0m\n", username);  // Affiche un message indiquant qu'un client a rejoint le chat

        char welcome_message[BUFFER_SIZE];
        snprintf(welcome_message, BUFFER_SIZE, "Bienvenue, %s\n", username);  // Construit un message de bienvenue pour le client
        send(client_socket, welcome_message, strlen(welcome_message), 0);  // Envoie le message de bienvenue au client
    } else {
        perror("recv");
        exit(EXIT_FAILURE);
    }

    while (1) {
        char message[BUFFER_SIZE];
        bytes_received = recv(client_socket, message, BUFFER_SIZE - 1, 0);  // Reçoit un message du client
        if (bytes_received > 0) {
            message[bytes_received] = '\0';

            // Envoyer le message à tous les clients connectés
            char formatted_message[BUFFER_SIZE];
            snprintf(formatted_message, BUFFER_SIZE, "\033[1;34m%s:\033[0m %s", username, message);  // Formate le message avec le nom d'utilisateur du client
            send_message_to_all_clients(formatted_message, client_socket);
        } else if (bytes_received == 0) {
            // Le client s'est déconnecté
            printf("\033[1;34m%s a quitté(e) le chat\033[0m\n", username);  // Affiche un message indiquant que le client s'est déconnecté

            char leave_message[BUFFER_SIZE];
            snprintf(leave_message, BUFFER_SIZE, "%s a quitté(e) le chat\n", username);  // Construit un message indiquant que le client s'est déconnecté
            send_message_to_all_clients(leave_message, client_socket);  // Envoie le message aux autres clients

            // Ferme le socket client
            close(client_socket);

            pthread_mutex_lock(&client_sockets_mutex);  // Verrouillage du mutex

            // Supprime le socket client du tableau
            for (int i = 0; i < MAX_CLIENTS; i++) {
                if (client_sockets[i] == client_socket) {
                    client_sockets[i] = -1;
                    break;
                }
            }

            pthread_mutex_unlock(&client_sockets_mutex);  // Déverrouillage du mutex

            break;
        } else {
            perror("recv");
            exit(EXIT_FAILURE);
        }
    }

    pthread_exit(NULL);  // Termine le thread
}

// Gère les signaux de terminaison du serveur
void handle_signal(int signal) {
    if (signal == SIGTERM || signal == SIGINT) {
        printf("Server terminated.\n");

        // Ferme le socket du serveur
        close(server_socket);

        // Ferme tous les sockets des clients
        pthread_mutex_lock(&client_sockets_mutex);  // Verrouillage du mutex

        for (int i = 0; i < MAX_CLIENTS; i++) {
            int client_socket = client_sockets[i];
            if (client_socket != -1) {
                close(client_socket);
            }
        }

        pthread_mutex_unlock(&client_sockets_mutex);  // Déverrouillage du mutex

        pthread_mutex_destroy(&client_sockets_mutex);  // Destruction du mutex

        exit(EXIT_SUCCESS);  // Termine le processus
    }
}

int main() {
    // Enregistre les gestionnaires de signaux
    signal(SIGTERM, handle_signal);
    signal(SIGINT, handle_signal);

    // Crée le socket du serveur
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Configure l'adresse du serveur
    struct sockaddr_in server_address;
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = inet_addr(SERVER_ADDRESS);
    server_address.sin_port = htons(SERVER_PORT);

    // Lie le socket du serveur à l'adresse spécifiée
    if (bind(server_socket, (struct sockaddr *)&server_address, sizeof(server_address)) == -1) {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    // Ecoute les connexions entrantes
    if (listen(server_socket, MAX_CLIENTS) == -1) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    printf("Le serveur est prêt à recevoir des connexions...\n");

    // Initialise le tableau des sockets clients
    for (int i = 0; i < MAX_CLIENTS; i++) {
        client_sockets[i] = -1;
    }

    pthread_mutex_init(&client_sockets_mutex, NULL);  // Initialise le mutex

    while (1) {
        struct sockaddr_in client_address;
        socklen_t client_address_length = sizeof(client_address);

        // Accepte une nouvelle connexion cliente
        int client_socket = accept(server_socket, (struct sockaddr *)&client_address, &client_address_length);
        if (client_socket == -1) {
            perror("accept");
            exit(EXIT_FAILURE);
        }

        pthread_mutex_lock(&client_sockets_mutex);  // Verrouillage du mutex

        // Ajoute le socket client au tableau
        for (int i = 0; i < MAX_CLIENTS; i++) {
            if (client_sockets[i] == -1) {
                client_sockets[i] = client_socket;
                break;
            }
        }

        pthread_mutex_unlock(&client_sockets_mutex);  // Déverrouillage du mutex

        // Crée un nouveau thread pour gérer le client
        pthread_t client_thread;
        if (pthread_create(&client_thread, NULL, client_handler, &client_socket) != 0) {
            perror("pthread_create");
            exit(EXIT_FAILURE);
        }
    }

    pthread_mutex_destroy(&client_sockets_mutex);  // Destruction du mutex

    return 0;
}
